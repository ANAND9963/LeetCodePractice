public class Solution {
    public int minCost(int[][] costs) {
       

        int costsR = helper(costs, 0, 0); // Start with red
        int costsB = helper(costs, 0, 1); // Start with blue
        int costsG = helper(costs, 0, 2); // Start with green

        return Math.min(costsR, Math.min(costsB, costsG));
    }

    public int helper(int[][] costs, int idx, int c) {
        if (idx == costs.length) return 0; 

        
        if (c == 0) { // Red
            return costs[idx][0] + Math.min(helper(costs, idx + 1, 1), helper(costs, idx + 1, 2));
        } else if (c == 1) { // Blue
            return costs[idx][1] + Math.min(helper(costs, idx + 1, 0), helper(costs, idx + 1, 2));
        } else { // Green
            return costs[idx][2] + Math.min(helper(costs, idx + 1, 0), helper(costs, idx + 1, 1));
        }
    }

    // Main method for testing
    public static void main(String[] args) {
        Solution solution = new Solution();

        int[][] costs1 = {
            {17, 2, 17},
            {16, 14, 5},
            {12, 3, 19},
            {15, 4, 18}
        };
        System.out.println(solution.minCost(costs1)); 

        int[][] costs2 = {
            {7, 6, 2}
        };
        System.out.println(solution.minCost(costs2)); 

        int[][] costs3 = {
            {8, 15, 12},
            {20, 7, 9},
            {5, 6, 13}
        };
        System.out.println(solution.minCost(costs3)); 

        int[][] costs4 = {};
        System.out.println(solution.minCost(costs4)); 
    }
}
